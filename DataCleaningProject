-- Populating Null Property Addresses

select * 
from NashvilleHousing
where PropertyAddress is null

select a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress,b.PropertyAddress) as FilledPropertyAddress
from NashvilleHousing a join NashvilleHousing b 
on a.ParcelID = b.ParcelID
and a.UniqueID <> b. UniqueID
where a.PropertyAddress is null

update a
set PropertyAddress = ISNULL(a.PropertyAddress,b.PropertyAddress)
from NashvilleHousing a join NashvilleHousing b 
on a.ParcelID = b.ParcelID
and a.UniqueID <> b. UniqueID
where a.PropertyAddress is null


--Seperating Address Into (Address, City)

select
substring(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1) as Address, 
substring(PropertyAddress, CHARINDEX(',', PropertyAddress) +1, len(PropertyAddress)) as State
from NashvilleHousing

alter table NashvilleHousing
add PropertySplitAddress nvarchar(255)

update NashvilleHousing
set PropertySplitAddress = substring(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1)

alter table NashvilleHousing
add PropertySplitState nvarchar(255)

update NashvilleHousing
set PropertySplitState = substring(PropertyAddress, CHARINDEX(',', PropertyAddress) +1, len(PropertyAddress))




--Seperating Owner Address Into (Address, City, State)

select 
PARSENAME(Replace(OwnerAddress, ',', '.'), 3),
PARSENAME(Replace(OwnerAddress, ',', '.'), 2),
PARSENAME(Replace(OwnerAddress, ',', '.'), 1)
from NashvilleHousing

alter table NashvilleHousing
add OwnerSplitAddress nvarchar(255)

update NashvilleHousing
set OwnerSplitAddress = PARSENAME(Replace(OwnerAddress, ',', '.'), 3)

alter table NashvilleHousing
add OwnerSplitCity nvarchar(255)

update NashvilleHousing
set OwnerSplitCity = PARSENAME(Replace(OwnerAddress, ',', '.'), 2)

alter table NashvilleHousing
add OwnerSplitState nvarchar(255)

update NashvilleHousing
set OwnerSplitState = PARSENAME(Replace(OwnerAddress, ',', '.'), 1)



--Changing Y and N to Yes and No in 'SoldAsVacant' Field

select distinct(SoldAsVacant), count(*)
from NashvilleHousing
group by SoldAsVacant
order by 2


select SoldAsVacant,
CASE
    when SoldAsVacant = 'Y' then 'Yes'
    when SoldAsVacant = 'N' then 'No'
    Else SoldAsVacant
End
from NashvilleHousing


update NashvilleHousing
set SoldAsVacant = CASE
    when SoldAsVacant = 'Y' then 'Yes'
    when SoldAsVacant = 'N' then 'No'
End


--Removing Duplicates

With Dups as (
select *, 
ROW_NUMBER() over(
    partition by ParcelID,
                PropertyAddress,
                SalePrice,
                SaleDate,
                LegalReference
                order by UniqueID
)row_num
from NashvilleHousing
)

delete
from Dups
where row_num > 1
-- order by UniqueID



--Deleting Unused Columns

Alter table NashvilleHousing
drop column OwnerAddress, PropertyAddress, TaxDistrict, SaleDate